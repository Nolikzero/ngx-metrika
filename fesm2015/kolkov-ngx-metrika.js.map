{"version":3,"file":"kolkov-ngx-metrika.js","sources":["ng://@noliknolik/ngx-metrika/lib/ym.token.ts","ng://@noliknolik/ngx-metrika/lib/ngx-metrika.service.ts","ng://@noliknolik/ngx-metrika/lib/ngx-metrika-goal.directive.ts","ng://@noliknolik/ngx-metrika/lib/ngx-metrika.module.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\n\nexport const YM_CONFIG = new InjectionToken('ngx-metrika Config');\n","import {EventEmitter, Inject, Injectable, Renderer2, RendererFactory2} from '@angular/core';\nimport {NavigationEnd, Router} from '@angular/router';\nimport {CommonOptions, MetrikaGoalEventOptions, MetrikaHitEventOptions, MetrikaHitOptions, NgxMetrikaConfig} from './interfaces';\nimport {filter, tap} from 'rxjs/operators';\nimport {YM_CONFIG} from './ym.token';\nimport {BehaviorSubject} from 'rxjs/internal/BehaviorSubject';\nimport {DOCUMENT} from '@angular/common';\n\ndeclare var Ya: any;\n\n/** @dynamic */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMetrikaService {\n  defaultConfig: NgxMetrikaConfig = {\n    id: 0,\n    triggerEvent: true,\n    trackPageViews: true,\n  };\n  config: NgxMetrikaConfig;\n  debug = false;\n  previousUrl: string;\n  private renderer: Renderer2;\n\n  public hit = new EventEmitter<MetrikaHitEventOptions>();\n  public reachGoal = new BehaviorSubject<MetrikaGoalEventOptions>({target: 'test'});\n\n  constructor(\n    @Inject(YM_CONFIG) ymConfig: NgxMetrikaConfig,\n    private router: Router,\n    rendererFactory: RendererFactory2,\n    @Inject(DOCUMENT) private document: Document,\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n    if (ymConfig && ymConfig.id) {\n      this.configure(ymConfig);\n    }\n  }\n\n  static getCounterNameById(id: string | number): string {\n    return `yaCounter${id}`;\n  }\n\n  static getCounterById(id: any) {\n    return window[NgxMetrikaService.getCounterNameById(id)];\n  }\n\n  configure(config: NgxMetrikaConfig) {\n    config = Object.assign({}, this.defaultConfig, config);\n    this.config = config;\n    this.insertMetrika(config);\n    this.checkCounter(config.id)\n      .then(() => {\n        this.hit.subscribe((y: MetrikaHitEventOptions) => {\n          this.onHit(this.router.url, y.hitOptions);\n        });\n        this.reachGoal.subscribe((y: MetrikaGoalEventOptions) => {\n          this.onReachGoal(y.target, y.options);\n        });\n      });\n    if (config.trackPageViews) {\n      this.router.events.pipe(\n        filter(event => event instanceof NavigationEnd),\n        tap(() => {\n          const options: MetrikaHitEventOptions = {\n            url: this.router.url\n          };\n          this.hit.emit(options);\n          this.previousUrl = this.router.url;\n        })\n      ).subscribe();\n    }\n  }\n\n  private onHit(url: string, options?: MetrikaHitOptions) {\n    try {\n      const defaults = {\n        referer: this.previousUrl\n      };\n      if (this.debug) {\n        console.log('Hit:', url, defaults, options);\n      }\n      const ya = NgxMetrikaService.getCounterById(this.config.id);\n      if (typeof ya !== 'undefined') {\n        const optionsNew = Object.assign(defaults, options);\n        if (this.debug) {\n          console.log('Hit:', url, optionsNew);\n        }\n        ya.hit(url, optionsNew);\n      }\n    } catch (err) {\n      console.error('Yandex Metrika hit error', err);\n    }\n  }\n\n  private onReachGoal(type: string, options: CommonOptions = {}) {\n    try {\n      const ya = NgxMetrikaService.getCounterById(this.config.id);\n      if (typeof ya !== 'undefined') {\n        if (this.debug) {\n          console.log('onReachGoal:', type, options);\n        }\n        ya.reachGoal(type, options.params, options.callback, options.ctx);\n      }\n    } catch (error) {\n      console.error('error', error);\n      console.warn(`'Event with type [${type}] can\\'t be fired because counter is still loading'`);\n    }\n  }\n\n  private insertMetrika(config: NgxMetrikaConfig) {\n    const name = 'yandex_metrika_callbacks2';\n    window[name] = window[name] || [];\n    window[name].push(() => {\n      try {\n        const a = NgxMetrikaService.getCounterNameById(config.id);\n        window[a] = new Ya.Metrika2(config);\n      } catch (e) {\n      }\n    });\n\n    const head = this.document.getElementsByTagName('head')[0];\n    const s = document.createElement('script');\n    s.type = 'text/javascript';\n    s.async = true;\n    s.src = 'https://mc.yandex.ru/metrika/tag.js';\n    const insetScriptTag = () => head.appendChild(s);\n\n    if ((window as any).opera === '[object Opera]') {\n      this.document.addEventListener('DOMContentLoaded', insetScriptTag, false);\n    } else {\n      insetScriptTag();\n    }\n    return name;\n  }\n\n  checkCounter(id: string | number): Promise<any> {\n    const that = this;\n    return new Promise((resolve) => {\n      const counterName = `yacounter${id}inited`;\n      that.renderer.listen('document', counterName, () => {\n        resolve({});\n      });\n    });\n  }\n}\n","import {NgxMetrikaService} from './ngx-metrika.service';\nimport {AfterViewInit, Directive, ElementRef, Input, Renderer2} from '@angular/core';\nimport {MetrikaGoalEventOptions} from './interfaces';\n\n@Directive({\n  selector: '[ymGoal]'\n})\nexport class NgxMetrikaGoalDirective implements AfterViewInit {\n  @Input() trackOn: string;\n  @Input() target: string;\n  @Input() params: any;\n  @Input() callback: () => void;\n\n  constructor(\n    private ym: NgxMetrikaService,\n    private renderer: Renderer2,\n    private el: ElementRef\n  ) {\n  }\n\n  ngAfterViewInit() {\n    try {\n      this.renderer.listen(this.el.nativeElement, this.trackOn, () => {\n        const goalOptions: MetrikaGoalEventOptions = {\n          target: this.target || this.trackOn,\n          options: {\n            callback: this.callback,\n            ...this.params\n          }\n        };\n        this.ym.reachGoal.next(goalOptions);\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgxMetrikaConfig} from './interfaces';\nimport {NgxMetrikaService} from './ngx-metrika.service';\nimport {YM_CONFIG} from './ym.token';\nimport {NgxMetrikaGoalDirective} from './ngx-metrika-goal.directive';\n\n@NgModule({\n  declarations: [NgxMetrikaGoalDirective],\n  exports: [NgxMetrikaGoalDirective],\n  imports: []\n})\nexport class NgxMetrikaModule {\n  public static forRoot(config?: NgxMetrikaConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMetrikaModule,\n      providers: [\n        NgxMetrikaService,\n        { provide: YM_CONFIG, useValue: config }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
